<context>
# Overview  
Este proyecto tiene como objetivo desarrollar una versión extremadamente simplificada del sistema de confirmación de asistencias para comedor empresarial.  
El sistema debe mantener solo lo esencial para permitir a los coordinadores registrar confirmaciones de asistencia diarias, y a los administradores visualizar un resumen básico.

Toda funcionalidad, estructura, estilo o archivo que no sea estrictamente necesario debe ser eliminado o reescrito para reducir la complejidad técnica y de interfaz.

# Core Features  

## Confirmación básica de asistencia
- **Qué hace**: Permite ingresar manualmente la cantidad de personas que asistirán a comer en un día específico.
- **Por qué es importante**: Es la función principal del sistema.
- **Cómo funciona**: Un formulario sencillo con selección de fecha y número de personas.

## Visualización de confirmaciones
- **Qué hace**: Muestra un resumen de las confirmaciones realizadas.
- **Por qué es importante**: Da visibilidad al administrador sin generar reportes complejos.
- **Cómo funciona**: Una lista por fecha con totales de asistencia.

# User Experience  

## Personas de Usuario

### Coordinador
- Puede registrar asistencias por fecha.
- No necesita login.
- Interfaz simple desde cualquier navegador.

### Administrador
- Puede ver la lista de asistencias registradas.
- No modifica ni administra usuarios.

## Flujos Clave
- Coordinador accede → elige fecha → ingresa número de personas → confirma.
- Administrador accede → ve lista de fechas con cantidad de asistentes.

## Consideraciones UI/UX
- Sin diseño personalizado, usar HTML/CSS básico.
- Compatible con navegador moderno.
- Funciona bien en escritorio y tablet.
- Evitar animaciones, gráficos o estilos avanzados.

</context>
<PRD>
# Technical Architecture  

## Componentes del Sistema
- **Frontend**: HTML, CSS y JS plano.
- **Persistencia**: IndexedDB o archivo JSON local.
- **Backend**: Ninguno. Sincronización deshabilitada.

## Modelos de Datos

### Confirmación
```javascript
{
  date: String, // YYYY-MM-DD
  peopleCount: Number
}
```

# Development Roadmap  

## Fase 1: MVP Minimal
- Crear pantalla para ingresar fecha y número de asistentes.
- Guardar datos localmente (IndexedDB o JSON).
- Crear pantalla para listar confirmaciones anteriores.
- Permitir borrar registros individualmente si es necesario.

## Fase 2: Limpieza
- Eliminar todo archivo, dependencia o función no necesaria.
- Reescribir componentes para reducir líneas de código.
- Unificar estilos en un solo archivo CSS (mínimo).

# Logical Dependency Chain
1. Formulario de confirmación.
2. Almacenamiento local.
3. Visualización de registros.
4. Limpieza del código y estructura.
5. Eliminación de cualquier módulo o función sobrante.

# Risks and Mitigations  

## Riesgo: Complejidad Residual
- **Mitigación**: Revisar cada archivo con IA para sugerencias de eliminación/simplificación.

## Riesgo: Interfaz confusa
- **Mitigación**: Usar componentes HTML nativos y layout sencillo sin JavaScript innecesario.

## Riesgo: Pérdida de datos locales
- **Mitigación**: Incluir botón manual de exportación a JSON.

# Appendix  
- Evitar uso de frameworks.
- No se requiere autenticación.
- Todo el proyecto debe caber en pocos archivos: `index.html`, `style.css`, `script.js`, y `data.json` (opcional).
</PRD>