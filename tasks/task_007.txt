# Task ID: 7
# Title: Implement Admin Confirmation Visualization
# Status: pending
# Dependencies: 6
# Priority: high
# Description: Create the interface for administrators to view attendance confirmations by day and branch.
# Details:
Add a section to admin.html that displays a table of confirmations. Show days of the week as columns and branches as rows. For each cell, display the number of confirmed attendees or 'Pending' if no confirmation exists. Include totals by day and by branch. Implement filtering by week. Add visual indicators for pending confirmations to easily identify which coordinators have not yet confirmed.

# Test Strategy:
Test the display of confirmation data with various scenarios (all confirmed, some pending, none confirmed). Verify that totals are calculated correctly. Test filtering by different weeks.

# Subtasks:
## 1. Create confirmation table structure in admin.html [pending]
### Dependencies: None
### Description: Add the HTML structure for the confirmation visualization table to the admin interface
### Details:
Create a new section in admin.html with a table structure that has days of the week as columns and branches as rows. Include header rows for days, placeholder cells for data, and footer rows for totals. Add appropriate CSS classes for styling. Include a container for the week selection filter above the table.

## 2. Implement week selection filter [pending]
### Dependencies: 7.1
### Description: Create a date picker or dropdown that allows administrators to filter the confirmation data by week
### Details:
Add a date input or dropdown component that allows selecting a specific week. Implement JavaScript functionality to update the selected week when changed. Set the default value to the current week. Include previous/next week navigation buttons for easier browsing. Ensure the component is positioned above the confirmation table.

## 3. Create API endpoint for confirmation data [pending]
### Dependencies: None
### Description: Develop a backend API endpoint that returns confirmation data aggregated by day and branch
### Details:
Create a new API endpoint (e.g., '/api/admin/confirmations') that accepts a week parameter. The endpoint should query the database for all confirmations within the specified week, aggregate the data by day and branch, and return a structured JSON response with counts of confirmed attendees for each day-branch combination. Include a 'pending' flag for combinations without confirmations.

## 4. Implement data fetching and table population [pending]
### Dependencies: 7.1, 7.2, 7.3
### Description: Create JavaScript functionality to fetch confirmation data and populate the table
### Details:
Implement a JavaScript function that calls the API endpoint with the selected week parameter. Process the returned data to populate the table cells with confirmation counts or 'Pending' labels. Update the table whenever the week selection changes. Include error handling for failed API requests. Use appropriate loading indicators during data fetching.

## 5. Calculate and display totals [pending]
### Dependencies: 7.4
### Description: Add functionality to calculate and display totals by day and by branch
### Details:
Extend the table population logic to calculate row totals (sum of confirmations for each branch across all days) and column totals (sum of confirmations for each day across all branches). Update the totals in the corresponding footer row and last column of the table. Ensure totals are recalculated whenever the table data changes.

## 6. Implement visual indicators for pending confirmations [pending]
### Dependencies: 7.4
### Description: Add visual styling to highlight pending confirmations in the table
### Details:
Create CSS styles for cells with pending confirmations (e.g., yellow background, warning icon). Apply these styles to cells where the confirmation status is pending. Add a color legend below the table explaining the visual indicators. Consider adding tooltips to pending cells with information about the branch coordinator who needs to confirm. Ensure the styling is accessible and maintains sufficient contrast.

