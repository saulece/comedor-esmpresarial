# Task ID: 1
# Title: Firebase Project Setup and Configuration
# Status: in-progress2
# Dependencies: None
# Priority: high
# Description: Create and configure a Firebase project with Firestore Database and Authentication services for the Corporate Dining System.
# Details:
1. Create a new Firebase project in the Firebase Console
2. Enable Firestore Database with appropriate region settings
3. Configure security rules for Firestore collections (menus, coordinators, attendanceConfirmations)
4. Enable Firebase Authentication with email/password method
5. Generate and save web app credentials (apiKey, authDomain, projectId, etc.)
6. Set up spending limits and monitoring in Firebase Console

# Test Strategy:
Verify project creation and service enablement in Firebase Console. Test connection to Firebase services using temporary test script with the generated credentials.

# Subtasks:
## 1. Create Firebase Project and Enable Core Services [pending]
### Dependencies: None
### Description: Set up a new Firebase project and enable the required services (Firestore and Authentication) with appropriate regional settings.
### Details:
1. Go to Firebase Console (console.firebase.google.com)
2. Click 'Add project' and name it 'Corporate Dining System'
3. Configure Google Analytics settings as needed
4. Once project is created, enable Firestore Database from the left sidebar
5. Select the appropriate region (choose one closest to your user base for lower latency)
6. Start in production mode
7. Enable Firebase Authentication from the left sidebar
8. In Authentication, go to 'Sign-in method' tab and enable Email/Password authentication

## 2. Configure Firestore Security Rules [pending]
### Dependencies: 1.1
### Description: Set up appropriate security rules for the Firestore collections to ensure proper access control for the Corporate Dining System.
### Details:
1. In Firebase Console, navigate to Firestore Database > Rules
2. Implement rules for the following collections:
   - menus: Allow read access to all authenticated users, write access only to admin users
   - coordinators: Allow read access to all authenticated users, write access only to admin users
   - attendanceConfirmations: Allow users to read/write only their own confirmations
3. Example rule structure:
```
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /menus/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    match /coordinators/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    match /attendanceConfirmations/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```
4. Publish the rules

## 3. Register Web Application and Generate Credentials [pending]
### Dependencies: 1.1
### Description: Register the web application with Firebase and generate the necessary credentials for integration with the front-end code.
### Details:
1. In Firebase Console, go to Project Overview
2. Click on the web icon (</>) to add a web app
3. Register app with nickname 'Corporate Dining Web App'
4. Check the box for 'Also set up Firebase Hosting' if needed
5. Click 'Register app'
6. Copy the provided Firebase configuration object containing:
   - apiKey
   - authDomain
   - projectId
   - storageBucket
   - messagingSenderId
   - appId
7. Store these credentials securely for use in the application
8. Create a .env file in the project root with these values (prefix with REACT_APP_ or VITE_ depending on your framework)
9. Add the .env file to .gitignore to prevent credentials from being committed to version control

## 4. Set Up Monitoring and Budget Controls [pending]
### Dependencies: 1.1
### Description: Configure Firebase monitoring and set up budget alerts to prevent unexpected costs during development and production.
### Details:
1. In Firebase Console, go to Project Settings
2. Navigate to the 'Usage and billing' tab
3. Link a billing account if not already done
4. Set up budget alerts:
   - Click 'Create budget'
   - Name the budget 'Corporate Dining System Budget'
   - Set an appropriate monthly budget amount (e.g., $50 for development)
   - Configure email alerts at 50%, 90%, and 100% of budget
5. Review the pricing tiers for Firestore and Authentication
6. Enable Google Cloud Monitoring:
   - Navigate to the Google Cloud Console for your project
   - Go to Monitoring > Dashboards
   - Set up a custom dashboard for tracking Firebase service usage
7. Document the expected costs and usage patterns for the team

