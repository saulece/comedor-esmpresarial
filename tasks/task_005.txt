# Task ID: 5
# Title: Adapt Admin Menu Management Functionality
# Status: pending
# Dependencies: 3, 4
# Priority: medium
# Description: Modify the existing admin menu management functionality to use Firebase for storage and implement real-time updates.
# Details:
1. Update admin.js to use the adapted storage module
2. Implement menu creation/editing with Firestore
3. Structure menu data according to the defined Firestore model
4. Add timestamps for creation and updates
5. Implement active menu toggling
6. Set up Firestore listeners for real-time updates
7. Add loading states and error handling
8. Ensure proper validation before saving data

# Test Strategy:
Test menu creation, editing, and activation workflows. Verify data structure in Firestore matches the defined model. Test real-time updates by modifying data from another client. Verify validation prevents invalid data submission.

# Subtasks:
## 1. Update storage module for Firebase integration [pending]
### Dependencies: None
### Description: Modify the existing storage module to use Firebase Firestore for menu data persistence instead of the current storage method.
### Details:
Create adapter functions in the storage module that map the existing CRUD operations to Firestore methods. Implement functions for: fetchMenus(), saveMenu(menuData), updateMenu(menuId, menuData), deleteMenu(menuId), and setActiveMenu(menuId). Ensure the module exports the same interface as before so integration with admin.js will be smoother in the next subtask.

## 2. Implement Firestore data model and validation [pending]
### Dependencies: 5.1
### Description: Define the Firestore collection structure for menus and implement validation logic for menu data.
### Details:
Create a 'menus' collection in Firestore. Define the menu document structure with fields: id, name, items (array), isActive (boolean), createdAt, and updatedAt timestamps. Implement validation functions that verify menu data before saving to Firestore, checking for required fields, proper structure of menu items, and data types. Add helper functions to format timestamps consistently using Firestore's server timestamp feature.

## 3. Update admin.js to use Firebase storage module [pending]
### Dependencies: 5.1, 5.2
### Description: Modify the admin.js file to use the new Firebase-based storage module and handle the asynchronous nature of Firestore operations.
### Details:
Refactor admin.js to use the updated storage module. Convert synchronous code to use async/await or Promises. Update the menu creation, editing, and deletion functions to work with the Firebase adapter. Implement proper error handling for Firestore operations. Ensure all UI interactions properly reflect the asynchronous state (loading indicators, success/error messages).

## 4. Implement real-time updates with Firestore listeners [pending]
### Dependencies: 5.3
### Description: Add Firestore listeners to provide real-time updates when menu data changes.
### Details:
Set up onSnapshot listeners in the admin interface to react to changes in the menus collection. Implement UI updates that respond to real-time data changes. Handle the initial data loading state and subsequent updates differently. Add cleanup functions to unsubscribe from listeners when components unmount or when listening is no longer needed. Implement optimistic UI updates for better user experience.

## 5. Add active menu toggling and finalize UI states [pending]
### Dependencies: 5.3, 5.4
### Description: Implement the ability to toggle which menu is active and enhance the UI with appropriate loading and error states.
### Details:
Create a toggle function that sets a menu as active and deactivates all others. Update the UI to clearly indicate which menu is currently active. Implement loading indicators during Firestore operations. Add comprehensive error handling with user-friendly error messages. Test the entire flow from menu creation to activation with real-time updates. Ensure all edge cases are handled, such as attempting to delete an active menu or handling concurrent edits.

