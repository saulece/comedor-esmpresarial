# Task ID: 6
# Title: Adapt Coordinator Management Functionality
# Status: pending
# Dependencies: 3, 4
# Priority: medium
# Description: Update the coordinator management functionality to use Firebase for storage and implement access code generation.
# Details:
1. Update coordinator management in admin.js
2. Implement coordinator creation with Firestore
3. Add secure access code generation functionality
4. Structure coordinator data according to the defined Firestore model
5. Add active/inactive status management
6. Set up Firestore listeners for real-time updates
7. Implement coordinator listing and filtering
8. Add validation for coordinator data

# Test Strategy:
Test coordinator creation and management workflows. Verify access code generation is secure and unique. Test coordinator activation/deactivation. Verify real-time updates when coordinator data changes.

# Subtasks:
## 1. Create Coordinator Firestore Data Model [pending]
### Dependencies: None
### Description: Define and implement the Firestore data model for coordinators according to application requirements
### Details:
Create a coordinators collection in Firestore with appropriate fields including name, email, phone, status (active/inactive), access code, and creation timestamp. Document the schema in the codebase. Update any existing model definitions to align with the new Firestore structure. Ensure the model supports the required filtering and listing operations.

## 2. Implement Secure Access Code Generation [pending]
### Dependencies: 6.1
### Description: Create a utility function for generating secure, unique access codes for coordinators
### Details:
Develop a utility function that generates cryptographically secure, unique access codes for coordinators. The function should create codes that are difficult to guess but easy to share (e.g., 8-10 characters). Include validation to ensure uniqueness by checking against existing codes in Firestore. Add appropriate error handling and documentation. This function will be used during coordinator creation and code regeneration.

## 3. Update Coordinator Creation and Management Functions [pending]
### Dependencies: 6.1, 6.2
### Description: Refactor the coordinator creation and management functions to use Firestore
### Details:
Modify the existing coordinator management functions in admin.js to use Firestore instead of the current storage method. Implement functions for creating, updating, and managing coordinators including status changes (active/inactive). Integrate the access code generation functionality. Add proper validation for all coordinator data before saving to Firestore. Ensure all operations include appropriate error handling and success confirmations.

## 4. Implement Real-time Coordinator Listing with Firestore Listeners [pending]
### Dependencies: 6.3
### Description: Create functionality to display and filter coordinators with real-time updates
### Details:
Implement Firestore listeners to provide real-time updates to the coordinator listing UI. Create query functions that support filtering by status, name, or other relevant fields. Ensure the UI updates automatically when coordinator data changes in Firestore. Optimize the listeners to minimize unnecessary re-renders and database reads. Include pagination if the coordinator list might become large.

## 5. Update Admin UI for Coordinator Management [pending]
### Dependencies: 6.3, 6.4
### Description: Adapt the admin interface to work with the new Firestore-based coordinator management
### Details:
Update the admin UI components to work with the new Firestore-based coordinator management functions. Modify forms for creating and editing coordinators, ensuring they validate input properly. Update the coordinator listing view to display real-time data from Firestore. Add UI elements for managing coordinator status (active/inactive) and regenerating access codes when needed. Test the complete flow from creation to management to ensure all functionality works as expected.

